<?xml version="1.0"?>

<page id="Clutter.Actor.allocate_available_size"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/experimental/ui/">
  <info>
    <link type="guide" xref="Clutter.Actor" group="method"/>
    <api:function>
      <api:returns>
        <api:type>none</api:type>
      </api:returns>
      <api:name>clutter_actor_allocate_available_size</api:name>
      <api:arg>
        <api:type>ClutterActor *</api:type>
        <api:name>self</api:name>
      </api:arg>
      <api:arg>
        <api:type>gfloat</api:type>
        <api:name>x</api:name>
      </api:arg>
      <api:arg>
        <api:type>gfloat</api:type>
        <api:name>y</api:name>
      </api:arg>
      <api:arg>
        <api:type>gfloat</api:type>
        <api:name>available_width</api:name>
      </api:arg>
      <api:arg>
        <api:type>gfloat</api:type>
        <api:name>available_height</api:name>
      </api:arg>
      <api:arg>
        <api:type>Clutter.AllocationFlags</api:type>
        <api:name>flags</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>allocate_available_size</title>
<synopsis><code mime="text/x-python">
@accepts(gfloat, gfloat, gfloat, gfloat, Clutter.AllocationFlags)
@returns(none)
def allocate_available_size(x, y, available_width, available_height, flags)
</code></synopsis>
<p>Allocates @self taking into account the <link xref="Clutter.Actor">Clutter.Actor</link>&lt;!-- --&gt;'s
preferred size, but limiting it to the maximum available width
and height provided.</p><p>This function will do the right thing when dealing with the
actor's request mode.</p><p>The implementation of this function is equivalent to:</p><p>|[
if (request_mode == CLUTTER_REQUEST_HEIGHT_FOR_WIDTH)
{
clutter_actor_get_preferred_width (self, available_height,
&amp;amp;min_width,
&amp;amp;natural_width);
width = CLAMP (natural_width, min_width, available_width);</p><p>clutter_actor_get_preferred_height (self, width,
&amp;amp;min_height,
&amp;amp;natural_height);
height = CLAMP (natural_height, min_height, available_height);
}
else
{
clutter_actor_get_preferred_height (self, available_width,
&amp;amp;min_height,
&amp;amp;natural_height);
height = CLAMP (natural_height, min_height, available_height);</p><p>clutter_actor_get_preferred_width (self, height,
&amp;amp;min_width,
&amp;amp;natural_width);
width = CLAMP (natural_width, min_width, available_width);
}</p><p>box.x1 = x; box.y1 = y;
box.x2 = box.x1 + available_width;
box.y2 = box.y1 + available_height;
clutter_actor_allocate (self, &amp;amp;box, flags);
]|</p><p>This function can be used by fluid layout managers to allocate
an actor's preferred size without making it bigger than the area
available for the container.</p>

<table>
<tr>
<td><p>x :</p></td>
<td><p>the actor's X coordinate</p></td>
</tr>
<tr>
<td><p>y :</p></td>
<td><p>the actor's Y coordinate</p></td>
</tr>
<tr>
<td><p>available_width :</p></td>
<td><p>the maximum available width, or -1 to use the actor's natural width</p></td>
</tr>
<tr>
<td><p>available_height :</p></td>
<td><p>the maximum available height, or -1 to use the actor's natural height</p></td>
</tr>
<tr>
<td><p>flags :</p></td>
<td><p>flags controlling the allocation</p></td>
</tr>
</table>
<p>Since 1.0</p>
</page>
