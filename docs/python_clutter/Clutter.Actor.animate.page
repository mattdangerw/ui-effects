<?xml version="1.0"?>

<page id="Clutter.Actor.animate"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/experimental/ui/">
  <info>
    <link type="guide" xref="Clutter.Actor" group="method"/>
    <api:function>
      <api:returns>
        <api:type>Clutter.Animation</api:type>
      </api:returns>
      <api:name>clutter_actor_animate</api:name>
      <api:arg>
        <api:type>ClutterActor *</api:type>
        <api:name>self</api:name>
      </api:arg>
      <api:arg>
        <api:type>gulong</api:type>
        <api:name>mode</api:name>
      </api:arg>
      <api:arg>
        <api:type>guint</api:type>
        <api:name>duration</api:name>
      </api:arg>
      <api:arg>
        <api:type>utf8</api:type>
        <api:name>first_property_name</api:name>
      </api:arg>
      <api:varargs/>
    </api:function>
  </info>
  <title>animate</title>
<synopsis><code mime="text/x-python">
@accepts(gulong, guint, utf8, &lt;varargs&gt;)
@returns(Clutter.Animation)
def animate(mode, duration, first_property_name, None)
</code></synopsis>
<p>Animates the given list of properties of @actor between the current
value for each property and a new final value. The animation has a
definite duration and a speed given by the @mode.</p><p>For example, this:</p><p>|[
clutter_actor_animate (rectangle, CLUTTER_LINEAR, 250,
"width", 100.0,
"height", 100.0,
NULL);
]|</p><p>will make width and height properties of the <link xref="Clutter.Actor">Clutter.Actor</link> "rectangle"
grow linearly between the current value and 100 pixels, in 250 milliseconds.</p><p>The animation @mode is a logical id, either from the <link xref="Clutter.AnimationMode">Clutter.AnimationMode</link>
enumeration of from clutter_alpha_register_func().</p><p>All the properties specified will be animated between the current value
and the final value. If a property should be set at the beginning of
the animation but not updated during the animation, it should be prefixed
by the "fixed::" string, for instance:</p><p>|[
clutter_actor_animate (actor, CLUTTER_EASE_IN_SINE, 100,
"rotation-angle-z", 360.0,
"fixed::rotation-center-z", &amp;amp;center,
NULL);
]|</p><p>Will animate the "rotation-angle-z" property between the current value
and 360 degrees, and set the "rotation-center-z" property to the fixed
value of the <link xref="Clutter.Vertex">Clutter.Vertex</link> "center".</p><p>This function will implicitly create a <link xref="Clutter.Animation">Clutter.Animation</link> object which
will be assigned to the @actor and will be returned to the developer
to control the animation or to know when the animation has been
completed.</p><p>If a name argument starts with "signal::", "signal-after::",
"signal-swapped::" or "signal-swapped-after::" the two following arguments
are used as callback function and data for a signal handler installed on
the <link xref="Clutter.Animation">Clutter.Animation</link> object for the specified signal name, for instance:</p><p>|[</p><p>static void
on_animation_completed (ClutterAnimation *animation,
ClutterActor     *actor)
{
clutter_actor_hide (actor);
}</p><p>clutter_actor_animate (actor, CLUTTER_EASE_IN_CUBIC, 100,
"opacity", 0,
"signal::completed", on_animation_completed, actor,
NULL);
]|</p><p>or, to automatically destroy an actor at the end of the animation:</p><p>|[
clutter_actor_animate (actor, CLUTTER_EASE_IN_CUBIC, 100,
"opacity", 0,
"signal-swapped-after::completed",
clutter_actor_destroy,
actor,
NULL);
]|</p><p>The "signal::" modifier is the equivalent of using g_signal_connect();
the "signal-after::" modifier is the equivalent of using
g_signal_connect_after() or g_signal_connect_data() with the
%G_CONNECT_AFTER; the "signal-swapped::" modifier is the equivalent
of using g_signal_connect_swapped() or g_signal_connect_data() with the
%G_CONNECT_SWAPPED flah; finally, the "signal-swapped-after::" modifier
is the equivalent of using g_signal_connect_data() with both the
%G_CONNECT_AFTER and %G_CONNECT_SWAPPED flags. The clutter_actor_animate()
function will not keep track of multiple connections to the same signal,
so it is your responsability to avoid them when calling
clutter_actor_animate() multiple times on the same actor.</p><p>Calling this function on an actor that is already being animated
will cause the current animation to change with the new final values,
the new easing mode and the new duration - that is, this code:</p><p>|[
clutter_actor_animate (actor, CLUTTER_LINEAR, 250,
"width", 100.0,
"height", 100.0,
NULL);
clutter_actor_animate (actor, CLUTTER_EASE_IN_CUBIC, 500,
"x", 100.0,
"y", 100.0,
"width", 200.0,
NULL);
]|</p><p>is the equivalent of:</p><p>|[
clutter_actor_animate (actor, CLUTTER_EASE_IN_CUBIC, 500,
"x", 100.0,
"y", 100.0,
"width", 200.0,
"height", 100.0,
NULL);
]|</p><p>&lt;note&gt;Unless the animation is looping, the <link xref="Clutter.Animation">Clutter.Animation</link> created by
clutter_actor_animate() will become invalid as soon as it is
complete.&lt;/note&gt;</p><p>Since the created <link xref="Clutter.Animation">Clutter.Animation</link> instance attached to @actor
is guaranteed to be valid throughout the <link xref="Clutter.Animation-completed">Clutter.Animation::completed</link>
signal emission chain, you will not be able to create a new animation
using clutter_actor_animate() on the same @actor from within the
<link xref="Clutter.Animation-completed">Clutter.Animation::completed</link> signal handler unless you use
g_signal_connect_after() to connect the callback function, for instance:</p><p>|[
static void
on_animation_completed (ClutterAnimation *animation,
ClutterActor     *actor)
{
clutter_actor_animate (actor, CLUTTER_EASE_OUT_CUBIC, 250,
"x", 500.0,
"y", 500.0,
NULL);
}</p><p>...
animation = clutter_actor_animate (actor, CLUTTER_EASE_IN_CUBIC, 250,
"x", 100.0,
"y", 100.0,
NULL);
g_signal_connect (animation, "completed",
G_CALLBACK (on_animation_completed),
actor);
...
]|</p><p>owned by the <link xref="Clutter.Actor">Clutter.Actor</link> and should not be unreferenced with
g_object_unref()</p>

<table>
<tr>
<td><p>mode :</p></td>
<td><p>an animation mode logical id</p></td>
</tr>
<tr>
<td><p>duration :</p></td>
<td><p>duration of the animation, in milliseconds</p></td>
</tr>
<tr>
<td><p>first_property_name :</p></td>
<td><p>the name of a property</p></td>
</tr>
<tr>
<td><p>None :</p></td>
<td></td>
</tr>
<tr>
<td><p>Returns :</p></td>
<td><p>a <link xref="Clutter.Animation">Clutter.Animation</link> object. The object is</p></td>
</tr>
</table>
<p>Since 1.0</p>
</page>
