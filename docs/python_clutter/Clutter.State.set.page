<?xml version="1.0"?>

<page id="Clutter.State.set"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/experimental/ui/">
  <info>
    <link type="guide" xref="Clutter.State" group="method"/>
    <api:function>
      <api:returns>
        <api:type>none</api:type>
      </api:returns>
      <api:name>clutter_state_set</api:name>
      <api:arg>
        <api:type>ClutterState *</api:type>
        <api:name>self</api:name>
      </api:arg>
      <api:arg>
        <api:type>utf8</api:type>
        <api:name>source_state_name</api:name>
      </api:arg>
      <api:arg>
        <api:type>utf8</api:type>
        <api:name>target_state_name</api:name>
      </api:arg>
      <api:arg>
        <api:type>gpointer</api:type>
        <api:name>first_object</api:name>
      </api:arg>
      <api:arg>
        <api:type>utf8</api:type>
        <api:name>first_property_name</api:name>
      </api:arg>
      <api:arg>
        <api:type>gulong</api:type>
        <api:name>first_mode</api:name>
      </api:arg>
      <api:varargs/>
    </api:function>
  </info>
  <title>set</title>
<synopsis><code mime="text/x-python">
@accepts(utf8, utf8, gpointer, utf8, gulong, &lt;varargs&gt;)
@returns(none)
def set(source_state_name, target_state_name, first_object, first_property_name, first_mode, None)
</code></synopsis>
<p>Adds multiple keys to a named state of a <link xref="Clutter.State">Clutter.State</link> instance, specifying
the easing mode and value a given property of an object should have at a
given progress of the animation.</p><p>The mode specified is the easing mode used when going to from the previous
key to the specified key.</p><p>For instance, the code below:</p><p>|[
clutter_state_set (state, NULL, "hover",
button, "opacity", CLUTTER_LINEAR, 255,
button, "scale-x", CLUTTER_EASE_OUT_CUBIC, 1.2,
button, "scale-y", CLUTTER_EASE_OUT_CUBIC, 1.2,
NULL);
]|</p><p>will create a transition from any state (a @source_state_name or NULL is
treated as a wildcard) and a state named "hover"; the
&lt;emphasis&gt;button&lt;/emphasis&gt; object will have the <link xref="Clutter.Actor-opacity">Clutter.Actor:opacity</link>
property animated to a value of 255 using %CLUTTER_LINEAR as the animation
mode, and the <link xref="Clutter.Actor-scale-x">Clutter.Actor:scale-x</link> and <link xref="Clutter.Actor-scale-y">Clutter.Actor:scale-y</link> properties
animated to a value of 1.2 using %CLUTTER_EASE_OUT_CUBIC as the animation
mode. To change the state (and start the transition) you can use the
clutter_state_set_state() function:</p><p>|[
clutter_state_set_state (state, "hover");
]|</p><p>If a given object, state_name, property tuple already exist in the
<link xref="Clutter.State">Clutter.State</link> instance, then the mode and value will be replaced with
the new specified values.</p><p>If a property name is prefixed with "delayed::" two additional
arguments per key are expected: a value relative to the full state time
to pause before transitioning and a similar value to pause after
transitioning, e.g.:</p><p>|[
clutter_state_set (state, "hover", "toggled",
button, "delayed::scale-x", CLUTTER_LINEAR, 1.0, 0.2, 0.2,
button, "delayed::scale-y", CLUTTER_LINEAR, 1.0, 0.2, 0.2,
NULL);
]|</p><p>will pause for 20% of the duration of the transition before animating,
and 20% of the duration after animating.</p>

<table>
<tr>
<td><p>source_state_name :</p></td>
<td><p>the name of the source state keys are being added for</p></td>
</tr>
<tr>
<td><p>target_state_name :</p></td>
<td><p>the name of the target state keys are being added for</p></td>
</tr>
<tr>
<td><p>first_object :</p></td>
<td><p>a <link xref="GObject">GObject</link></p></td>
</tr>
<tr>
<td><p>first_property_name :</p></td>
<td><p>a property of @first_object to specify a key for</p></td>
</tr>
<tr>
<td><p>first_mode :</p></td>
<td><p>the id of the alpha function to use</p></td>
</tr>
<tr>
<td><p>None :</p></td>
<td></td>
</tr>
</table>
<p>Since 1.4</p>
</page>
